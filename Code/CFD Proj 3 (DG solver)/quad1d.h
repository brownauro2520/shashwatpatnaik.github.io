#ifndef QUAD1D_H_INCLUDED
#define QUAD1D_H_INCLUDED
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
/*
tuple<double, vector<double>, vector<double>> hello = quad1d(o);
vector<double> x = get<2>(hello);
*/


tuple<double, vector<double>, vector<double>> quad1d(int order) {

typedef double real;

//if the order does not exist then move to higher order
if(order == 0) {
    cout << "invalid order " << order << endl;
} else if(order % 2 == 0) {
    order = order + 1;
} else {
    order = order;
}
int n;
vector<double> x;
vector<double> w;

//quadrature points
switch (order){

case 1:
    n = 1;
    x = {
    0.500000000000000
    };
    w = {
    1.000000000000000
    };
    break;
case 3:
    n = 2;
    x = {
    0.211324865405187, 0.788675134594813
    };
    w = {
    0.500000000000000, 0.500000000000000
    };
    break;
case 5:
    n = 3;
    x = {
    0.112701665379258, 0.500000000000000, 0.887298334620742
    };
    w = {
    0.277777777777778, 0.444444444444444, 0.277777777777778
    };
    break;
case 7:
    n = 4;
    x = {
    0.069431844202974, 0.330009478207572, 0.669990521792428, 0.930568155797026
    };
    w = {
    0.173927422568727, 0.326072577431273, 0.326072577431273, 0.173927422568727
    };
    break;
case 9:
    n = 5;
    x = {
    0.046910077030668, 0.230765344947158, 0.500000000000000, 0.769234655052841,
    0.953089922969332
    };
    w = {
    0.118463442528095, 0.239314335249683, 0.284444444444444, 0.239314335249683,
    0.118463442528095
    };
    break;
case 11:
    n = 6;
    x = {
    0.033765242898424, 0.169395306766868, 0.380690406958402, 0.619309593041598,
    0.830604693233132, 0.966234757101576
    };
    w = {
    0.085662246189585, 0.180380786524069, 0.233956967286345, 0.233956967286345,
    0.180380786524069, 0.085662246189585
    };
    break;
case 13:
    n = 7;
    x = {
    0.025446043828621, 0.129234407200303, 0.297077424311301, 0.500000000000000,
    0.702922575688699, 0.870765592799697, 0.974553956171379
    };
    w = {
    0.064742483084435, 0.139852695744638, 0.190915025252560, 0.208979591836735,
    0.190915025252560, 0.139852695744638, 0.064742483084435
    };
    break;
case 15:
    n = 8;
    x = {
    0.019855071751232, 0.101666761293187, 0.237233795041836, 0.408282678752175,
    0.591717321247825, 0.762766204958164, 0.898333238706813, 0.980144928248768
    };
    w = {
    0.050614268145188, 0.111190517226687, 0.156853322938944, 0.181341891689181,
    0.181341891689181, 0.156853322938944, 0.111190517226687, 0.050614268145188
    };
    break;
case 17:
    n = 9;
    x = {
    0.015919880246187, 0.081984446336682, 0.193314283649705, 0.337873288298096,
    0.500000000000000, 0.662126711701905, 0.806685716350295, 0.918015553663318,
    0.984080119753813
    };
    w = {
    0.040637194180787, 0.090324080347429, 0.130305348201468, 0.156173538520001,
    0.165119677500630, 0.156173538520001, 0.130305348201468, 0.090324080347429,
    0.040637194180787
    };
    break;
case 19:
    n = 10;
    x = {
    0.013046735741414, 0.067468316655508, 0.160295215850488, 0.283302302935376,
    0.425562830509184, 0.574437169490816, 0.716697697064624, 0.839704784149512,
    0.932531683344492, 0.986953264258586
    };
    w = {
    0.033335672154344, 0.074725674575290, 0.109543181257991, 0.134633359654998,
    0.147762112357376, 0.147762112357376, 0.134633359654998, 0.109543181257991,
    0.074725674575290, 0.033335672154344
    };
    break;
case 21:
    n = 11;
    x = {
    0.010885670926972, 0.056468700115952, 0.134923997212975, 0.240451935396594,
    0.365228422023828, 0.500000000000000, 0.634771577976172, 0.759548064603406,
    0.865076002787025, 0.943531299884048, 0.989114329073028
    };
    w = {
    0.027834283558087, 0.062790184732452, 0.093145105463867, 0.116596882295995,
    0.131402272255123, 0.136462543388950, 0.131402272255123, 0.116596882295995,
    0.093145105463867, 0.062790184732452, 0.027834283558087
    };
    break;
case 23:
    cout << "WHY" << endl;
    break;
case 25:
    cout << "WHY" << endl;
    break;
case 27:
    cout << "WHY" << endl;
    break;
case 29:
    cout << "WHY" << endl;
    break;
case 31:
    cout << "WHY" << endl;
    break;
case 33:
    cout << "WHY" << endl;
    break;
case 35:
    cout << "WHY" << endl;
    break;
case 37:
    cout << "WHY" << endl;
    break;
case 39:
    cout << "WHY" << endl;
    break;
}
return make_tuple(n,x,w);

}
#endif // QUAD1D_H_INCLUDED
